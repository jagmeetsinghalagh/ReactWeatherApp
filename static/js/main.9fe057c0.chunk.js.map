{"version":3,"sources":["actions/index.js","components/search_bar.js","components/city_weather_list.js","App.js","reducers/index.js","reducers/weather_reducer.js","index.js"],"names":["FETCH_WEATHER","API_KEY","ROOT_URL","SearchBar","field","react_default","a","createElement","Object","assign","type","input","className","placeholder","values","this","props","fetchWeather","city","handleSubmit","onSubmit","onSubmitHandler","bind","Field","name","component","renderField","Component","reduxForm","form","connect","request","axios","get","concat","payload","CityWeatherList","weather","map","data","cityTemp","list","cityData","main","temp","cityPressure","pressure","cityHumidity","humidity","key","build","height","color","length","renderWeather","state","App","search_bar","city_weather_list","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","formReducer","createStoreWithMiddleware","applyMiddleware","promise","createStore","ReactDOM","render","es","store","reducers","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.9fe057c0.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const FETCH_WEATHER = 'fetch_weather';\nconst API_KEY = '7431f9e50f9f99bc341f56a22a48685d';\nconst ROOT_URL = 'http://api.openweathermap.org/data/2.5/forecast?q=';\n\nexport function fetchWeather(city) {\n    const request = axios.get(`${ROOT_URL}${city},IN&appid=${API_KEY}`);\n\n    return {\n        type: FETCH_WEATHER,\n        payload: request        \n    };\n}","import React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport { fetchWeather } from '../actions/index';\n\nclass SearchBar extends Component {\n\n    renderField(field) {\n        return (\n            <input \n                type=\"text\"\n                { ...field.input } \n                className=\"form-control\"\n                placeholder=\"Enter city name to search weather for last five days\"\n            />\n            \n        );\n    }\n\n    onSubmitHandler(values) {\n        this.props.fetchWeather(values.city);\n    }\n\n    render() {\n\n        const { handleSubmit } = this.props;\n\n        return (\n            <div >\n                <form onSubmit = { handleSubmit( this.onSubmitHandler.bind(this) )} >\n                    <div className=\"input-group mt-3 p-5\">\n                        <Field\n                            name=\"city\"\n                            component={ this.renderField }\n                        />\n                        <span className=\"input-group-btn\">\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                <i className =\"fas fa-search\"></i>\n                            </button>\n                        </span>\n                    </div> \n                </form> \n            </div>\n        );\n    }\n}\n\n\nexport default reduxForm({\n    form: \"search-bar\"\n})(\n    connect(null, { fetchWeather })(SearchBar)\n);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\n\nclass CityWeatherList extends Component {\n\n    renderWeather() {\n        return this.props.weather.map( (data) => {\n            let cityTemp = data.list.map(cityData => cityData.main.temp);\n            let cityPressure = data.list.map(cityData => cityData.main.pressure);\n            let cityHumidity = data.list.map(cityData => cityData.main.humidity);\n\n            return (\n                <tr key={ data.city.name }>\n                    <td>{ data.city.name }</td>\n                    <td >\n                        <Sparklines data={cityTemp} height={100}>\n                            <SparklinesLine color='blue' />\n                        </Sparklines>\n                    </td>\n                    <td >\n                    <Sparklines data={cityPressure} height={110}>\n                            <SparklinesLine color='red' />\n                        </Sparklines>\n                    </td>\n                    <td>\n                    <Sparklines data={cityHumidity} height={110}>\n                            <SparklinesLine color='green' />\n                        </Sparklines>\n                    </td>\n                </tr>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container\" >\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th>City</th>\n                            <th>Temprature</th>\n                            <th>Pressure</th>\n                            <th>Humidity</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \n                        { this.props.weather.length > 0 && \n                            this.renderWeather.bind(this)()\n                        }\n                    </tbody>\n                </table>\n                \n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { weather: state.weather };\n}\n\nexport default connect(mapStateToProps)(CityWeatherList);\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport SearchBar from './components/search_bar';\nimport CityWeatherList from './components/city_weather_list';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchBar />\n        <CityWeatherList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport { weatherReducer } from './weather_reducer'; \n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n    form: formReducer\n});\n\nexport default rootReducer;","import { FETCH_WEATHER } from '../actions';\n\nexport function weatherReducer(state = [] , action) {\n    switch(action.type){\n        case FETCH_WEATHER:\n            \n            return [ action.payload.data , ...state ];\n            // [ ...state,action.payload] === state.concat(actio.payload)\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport promise from 'redux-promise'\n\nimport reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nReactDOM.render(\n    <Provider store = { createStoreWithMiddleware(reducers) }>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n\n"],"sourceRoot":""}